// Snake Game with 3-second instruction animation and auto-start
document.addEventListener('DOMContentLoaded', function() {
    console.clear();
    console.log("=== SNAKE GAME WITH ANIMATION AND AUTO-START ===");
    
    // Store original start game function
    const originalStartGame = gameController.startGame;
    
    // Override start game function
    gameController.startGame = function(gameType) {
        if (gameType === 'snake') {
            console.log("Starting Snake Game with instruction animation and auto-start");
            
            // Set up game area
            const gameArea = document.getElementById('game-area');
            gameArea.classList.remove('hidden');
            
            // Hide all game containers and show snake container
            document.querySelectorAll('.game-container').forEach(container => {
                container.classList.add('hidden');
            });
            document.getElementById('snake-container').classList.remove('hidden');
            
            // Hide start screen
            document.getElementById('snake-start-screen').classList.add('hidden');
            
            // Show canvas but don't start game immediately
            const canvas = document.getElementById('snake-canvas');
            canvas.classList.remove('hidden');
            canvas.style.display = 'block';
            
            // Update game title
            document.getElementById('current-game-title').textContent = 'Snake Game';
            
            // Initialize the snake game early so it shows in the background during animation
            const SnakeGame = {
                canvas: canvas,
                ctx: canvas.getContext('2d'),
                snake: [
                    {x: 10, y: 10},
                    {x: 9, y: 10},
                    {x: 8, y: 10}
                ],
                food: null,
                direction: '',
                nextDirection: '',
                gridSize: 20,
                cellSize: 20,
                score: 0,
                gameStarted: false,
                gameOver: false,
                gameInterval: null,
                
                init: function() {
                    // Reset game state
                    this.snake = [
                        {x: 10, y: 10},
                        {x: 9, y: 10},
                        {x: 8, y: 10}
                    ];
                    this.direction = '';
                    this.nextDirection = '';
                    this.score = 0;
                    this.gameStarted = false;
                    this.gameOver = false;
                    
                    // Update score display
                    document.getElementById('game-score').textContent = 'Score: 0';
                    
                    // Generate initial food
                    this.generateFood();
                    
                    // Set up event listeners
                    this.setupControls();
                    
                    // Clear any existing game loops
                    if (this.gameInterval) {
                        clearInterval(this.gameInterval);
                    }
                    
                    // Start game loop
                    this.gameInterval = setInterval(() => this.update(), 150);
                    
                    // Render initial state
                    this.draw();
                    
                    console.log("Snake game initialized");
                },
                
                setupControls: function() {
                    // Keyboard controls
                    document.addEventListener('keydown', (e) => {
                        if (!this.gameStarted) {
                            // Start game on any direction key
                            if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'w', 's', 'a', 'd'].includes(e.key)) {
                                this.gameStarted = true;
                            }
                        }
                        
                        switch (e.key) {
                            case 'ArrowUp':
                            case 'w':
                            case 'W':
                                if (this.direction !== 'down') this.nextDirection = 'up';
                                break;
                            case 'ArrowDown':
                            case 's':
                            case 'S':
                                if (this.direction !== 'up') this.nextDirection = 'down';
                                break;
                            case 'ArrowLeft':
                            case 'a':
                            case 'A':
                                if (this.direction !== 'right') this.nextDirection = 'left';
                                break;
                            case 'ArrowRight':
                            case 'd':
                            case 'D':
                                if (this.direction !== 'left') this.nextDirection = 'right';
                                break;
                        }
                    });
                    
                    // Touch controls
                    const touchControls = document.querySelectorAll('.arrow-key');
                    touchControls.forEach(control => {
                        control.addEventListener('click', () => {
                            if (!this.gameStarted) {
                                this.gameStarted = true;
                            }
                            
                            if (control.classList.contains('up')) {
                                if (this.direction !== 'down') this.nextDirection = 'up';
                            } else if (control.classList.contains('down')) {
                                if (this.direction !== 'up') this.nextDirection = 'down';
                            } else if (control.classList.contains('left')) {
                                if (this.direction !== 'right') this.nextDirection = 'left';
                            } else if (control.classList.contains('right')) {
                                if (this.direction !== 'left') this.nextDirection = 'right';
                            }
                        });
                    });
                },
                
                generateFood: function() {
                    let x, y;
                    let validPosition = false;
                    
                    while (!validPosition) {
                        x = Math.floor(Math.random() * this.gridSize);
                        y = Math.floor(Math.random() * this.gridSize);
                        
                        validPosition = true;
                        
                        // Check if food overlaps with snake
                        for (let segment of this.snake) {
                            if (segment.x === x && segment.y === y) {
                                validPosition = false;
                                break;
                            }
                        }
                    }
                    
                    this.food = {x, y};
                },
                
                update: function() {
                    if (!this.gameStarted || this.gameOver) return;
                    
                    // Update direction from next direction
                    this.direction = this.nextDirection;
                    
                    // Move snake based on direction
                    let newHead = {x: this.snake[0].x, y: this.snake[0].y};
                    
                    switch (this.direction) {
                        case 'up':
                            newHead.y -= 1;
                            break;
                        case 'down':
                            newHead.y += 1;
                            break;
                        case 'left':
                            newHead.x -= 1;
                            break;
                        case 'right':
                            newHead.x += 1;
                            break;
                        default:
                            // No movement if no direction
                            return;
                    }
                    
                    // Check for collisions with walls
                    if (
                        newHead.x < 0 || 
                        newHead.x >= this.gridSize ||
                        newHead.y < 0 || 
                        newHead.y >= this.gridSize
                    ) {
                        this.gameOver = true;
                        this.draw();
                        return;
                    }
                    
                    // Check for collisions with self
                    for (let segment of this.snake) {
                        if (segment.x === newHead.x && segment.y === newHead.y) {
                            this.gameOver = true;
                            this.draw();
                            return;
                        }
                    }
                    
                    // Check for collision with food
                    const ateFood = (newHead.x === this.food.x && newHead.y === this.food.y);
                    
                    // Add new head to snake
                    this.snake.unshift(newHead);
                    
                    // If not eating food, remove tail
                    if (!ateFood) {
                        this.snake.pop();
                    } else {
                        // Generate new food
                        this.generateFood();
                        
                        // Update score
                        this.score += 10;
                        gameController.score = this.score;
                        gameController.updateScore(true);
                    }
                    
                    // Draw updated state
                    this.draw();
                },
                
                draw: function() {
                    // Clear the canvas with an explicit size
                    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
                    
                    // Draw background with a darker color for better visibility
                    this.ctx.fillStyle = '#1a1a2e';
                    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
                    
                    // Draw grid lines for better visibility during animation
                    this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';
                    this.ctx.lineWidth = 1;
                    
                    // Draw vertical grid lines
                    for(let i = 0; i <= this.gridSize; i++) {
                        this.ctx.beginPath();
                        this.ctx.moveTo(i * this.cellSize, 0);
                        this.ctx.lineTo(i * this.cellSize, this.canvas.height);
                        this.ctx.stroke();
                    }
                    
                    // Draw horizontal grid lines
                    for(let i = 0; i <= this.gridSize; i++) {
                        this.ctx.beginPath();
                        this.ctx.moveTo(0, i * this.cellSize);
                        this.ctx.lineTo(this.canvas.width, i * this.cellSize);
                        this.ctx.stroke();
                    }
                    
                    // Draw food
                    if (this.food) {
                        this.ctx.fillStyle = '#ff0080';
                        this.ctx.beginPath();
                        this.ctx.arc(
                            this.food.x * this.cellSize + this.cellSize / 2,
                            this.food.y * this.cellSize + this.cellSize / 2,
                            this.cellSize / 2 - 2,
                            0,
                            Math.PI * 2
                        );
                        this.ctx.fill();
                    }
                    
                    // Draw snake
                    this.snake.forEach((segment, index) => {
                        // Different color for head vs body
                        if (index === 0) {
                            this.ctx.fillStyle = '#00ff00'; // Bright green for head
                        } else {
                            const value = Math.max(100, 255 - index * 8);
                            this.ctx.fillStyle = `rgb(0, ${value}, 0)`; // Darker green for body
                        }
                        
                        this.ctx.fillRect(
                            segment.x * this.cellSize + 1,
                            segment.y * this.cellSize + 1,
                            this.cellSize - 2,
                            this.cellSize - 2
                        );
                    });
                    
                    // If game not started, show prompt - but make this subtler during initial animation
                    if (!this.gameStarted) {
                        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';
                        this.ctx.font = '16px Arial';
                        this.ctx.textAlign = 'center';
                        this.ctx.fillText(
                            'Game will start after instructions',
                            this.canvas.width / 2,
                            this.canvas.height - 20
                        );
                    }
                },
                
                endGame: function() {
                    clearInterval(this.gameInterval);
                    this.draw(); // Show final state with game over message
                    console.log("Game over with score:", this.score);
                },
                
                reset: function() {
                    this.init();
                },
                
                stop: function() {
                    if (this.gameInterval) {
                        clearInterval(this.gameInterval);
                    }
                }
            };
            
            // Generate initial food and draw the board before showing controls
            SnakeGame.generateFood();
            SnakeGame.draw();
            
            // Create overlay for instructions
            const overlay = document.createElement('div');
            overlay.style.position = 'absolute';
            overlay.style.top = '0';
            overlay.style.left = '0';
            overlay.style.width = '100%';  // Use 100% instead of canvas.width
            overlay.style.height = '100%'; // Use 100% instead of canvas.height
            overlay.style.display = 'flex';
            overlay.style.flexDirection = 'column';
            overlay.style.justifyContent = 'center';
            overlay.style.alignItems = 'center';
            overlay.style.backgroundColor = 'rgba(26, 26, 46, 0.7)';
            overlay.style.backdropFilter = 'blur(3px)';
            overlay.style.zIndex = '100'; // Add zIndex to ensure it's on top
            overlay.style.transition = 'opacity 1s'; // Re-add transition for fade effect
            
            // Create controls title to match the image
            const title = document.createElement('div');
            title.textContent = 'CONTROLS';
            title.style.fontWeight = 'bold';
            title.style.fontSize = '16px';
            title.style.color = 'white';
            title.style.marginBottom = '20px';
            title.style.backgroundColor = 'rgba(255, 255, 255, 0.15)';
            title.style.padding = '6px 12px';
            title.style.borderRadius = '4px';
            title.style.letterSpacing = '1px';
            overlay.appendChild(title);
            
            // Create arrows container with exact layout to match image
            const arrowsContainer = document.createElement('div');
            arrowsContainer.style.display = 'grid';
            arrowsContainer.style.gridTemplateColumns = '1fr 1fr 1fr';
            arrowsContainer.style.gridTemplateRows = '1fr 1fr 1fr';
            arrowsContainer.style.gridGap = '5px';
            arrowsContainer.style.margin = '0 auto 15px auto';
            arrowsContainer.style.width = '125px';
            
            // Helper to create arrows
            function createArrow(content, className) {
                const arrow = document.createElement('div');
                arrow.innerHTML = content;
                arrow.style.backgroundColor = 'rgba(255, 255, 255, 0.25)';
                arrow.style.borderRadius = '6px';
                arrow.style.width = '35px';
                arrow.style.height = '35px';
                arrow.style.display = 'flex';
                arrow.style.alignItems = 'center';
                arrow.style.justifyContent = 'center';
                arrow.style.color = 'white';
                arrow.style.fontSize = '18px';
                arrow.style.boxShadow = '0 2px 4px rgba(0, 0, 0, 0.2)';
                arrow.className = className;
                return arrow;
            }
            
            // Add arrows in grid layout exactly as shown in image
            // Empty cell (top-left)
            arrowsContainer.appendChild(document.createElement('div'));
            // Up arrow (top-center)
            arrowsContainer.appendChild(createArrow('&#8593;', 'arrow up'));
            // Empty cell (top-right)
            arrowsContainer.appendChild(document.createElement('div'));
            // Left arrow (middle-left)
            arrowsContainer.appendChild(createArrow('&#8592;', 'arrow left'));
            // Down arrow (middle-center)
            arrowsContainer.appendChild(createArrow('&#8595;', 'arrow down'));
            // Right arrow (middle-right)
            arrowsContainer.appendChild(createArrow('&#8594;', 'arrow right'));
            
            overlay.appendChild(arrowsContainer);
            
            // Add instructions with typewriter effect
            const instructions = document.createElement('div');
            instructions.style.color = 'white';
            instructions.style.backgroundColor = 'rgba(156, 39, 176, 0.8)';
            instructions.style.padding = '10px 15px';
            instructions.style.borderRadius = '4px';
            instructions.style.fontSize = '13px';
            instructions.style.margin = '15px 0 0 0';
            instructions.style.maxWidth = '250px';
            instructions.style.textAlign = 'center';
            instructions.style.boxShadow = '0 2px 5px rgba(0, 0, 0, 0.3)';
            overlay.appendChild(instructions);
            
            // Add overlay to snake container
            const snakeContainer = document.getElementById('snake-container');
            snakeContainer.style.position = 'relative';
            snakeContainer.appendChild(overlay);
            
            // Typewriter effect
            const instructionText = "Press arrow keys on your computer to move snake";
            let i = 0;
            
            function typeWriter() {
                if (i < instructionText.length) {
                    instructions.textContent += instructionText.charAt(i);
                    i++;
                    setTimeout(typeWriter, 30);
                }
            }
            
            instructions.textContent = '';
            typeWriter();
            
            // After 3 seconds, fade out overlay and start game
            setTimeout(() => {
                // Start fade out
                overlay.style.opacity = '0';
                
                // After fade completes, remove overlay and start game
                setTimeout(() => {
                    // Remove overlay from snake container, not body
                    snakeContainer.removeChild(overlay);
                    
                    // Initialize the game
                    SnakeGame.init();
                    this.currentGame = SnakeGame;
                    
                    // Show regular controls if needed
                    const controlsElement = document.querySelector('.snake-controls');
                    if (controlsElement) controlsElement.classList.remove('hidden');
                    
                    console.log("Overlay removed, starting snake game");
                }, 1000); // 1 second for fade out animation
            }, 3000); // 3 seconds display time
            
            // Setup restart and exit buttons
            document.getElementById('restart-game').addEventListener('click', () => {
                if (this.currentGame && this.currentGame.reset) {
                    this.currentGame.reset();
                }
            });
            
            document.getElementById('exit-game').addEventListener('click', () => {
                if (this.currentGame && this.currentGame.stop) {
                    this.currentGame.stop();
                }
                this.exitGame();
            });
        } else {
            // Use original for other games
            originalStartGame.call(this, gameType);
        }
    };
    
    console.log("Snake game setup complete with animation and auto-start");

    // Add this right after your document.addEventListener('DOMContentLoaded') line
    document.addEventListener('keydown', function(e) {
        // Prevent default for arrow keys to stop page scrolling
        if(['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Space'].includes(e.code)) {
            e.preventDefault();
        }
    }, false);
}); 